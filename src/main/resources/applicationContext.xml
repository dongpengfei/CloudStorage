<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
       default-lazy-init="true">

    <description>Spring公共配置</description>

    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="cn.im47.cloud.storage">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:/mapper/Configuration.xml"/>
        <property name="typeAliasesPackage" value="cn.im47.cloud.storage.commons.entity.entity"/>
        <property name="mapperLocations" value="classpath:/mapper/*Mapper.xml"/>
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.im47.cloud.storage.commons.dao"/>
    </bean>

    <!-- 事务管理器配置, 使用jdbc事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 另一个事务管理器, Jdbc单数据源事务 -->
    <bean id="quartzTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="quartzDataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- JSR303 Validator定义 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <!-- production/local development环境 -->
    <beans profile="production,development">
        <context:property-placeholder ignore-resource-not-found="true"
                                      location="classpath*:/application.properties,
                                      classpath*:/application.local.properties,
                                      file:/opt/CT-Proxy/application.server.properties"/>

        <!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
            <!-- Connection Info -->
            <property name="driverClassName" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
            <property name="defaultAutoCommit" value="false"/>
        </bean>

        <!-- quartz使用的数据源配置 -->
        <bean id="quartzDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
            <property name="driverClass" value="${quartz.jdbc.driver}"/>
            <property name="url" value="${quartz.jdbc.url}"/>
            <property name="username" value="${quartz.jdbc.username}"/>
            <property name="password" value="${quartz.jdbc.password}"/>
        </bean>
    </beans>

    <!-- unit test环境 -->
    <beans profile="test">
        <context:property-placeholder ignore-resource-not-found="true"
                                      location="classpath*:/application.properties,
          			  classpath*:/application.test.properties"/>

        <!-- 嵌入式内存中数据库 -->
        <jdbc:embedded-database id="dataSource" type="H2">
            <jdbc:script location="classpath:sql/h2/schema.sql"/>
        </jdbc:embedded-database>

        <jdbc:embedded-database id="quartzDataSource" type="H2">
            <jdbc:script location="classpath:sql/h2/quartz.sql"/>
        </jdbc:embedded-database>

        <!-- 初始化默认数据 -->
        <bean class="org.springside.modules.test.data.DataInitializer" lazy-init="false">
            <property name="dataSource" ref="dataSource"/>
            <property name="dataFile" value="/data/sample-data.xml"/>
        </bean>
    </beans>

    <!-- functional test环境 -->
    <beans profile="functional">
        <context:property-placeholder ignore-resource-not-found="true"
                                      location="classpath*:/application.properties,
          			  classpath*:/application.functional.properties,
          			  classpath*:/application.functional-local.properties"/>

        <!-- 简单data source -->
        <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
            <!-- Connection Info -->
            <property name="driverClass" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
        </bean>

        <bean id="quartzDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
            <property name="driverClass" value="${quartz.jdbc.driver}"/>
            <property name="url" value="${quartz.jdbc.url}"/>
            <property name="username" value="${quartz.jdbc.username}"/>
            <property name="password" value="${quartz.jdbc.password}"/>
        </bean>

        <!-- 初始化数据结构 -->
        <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
            <jdbc:script location="classpath:sql/mysql/schema.sql"/>
        </jdbc:initialize-database>

        <jdbc:initialize-database data-source="quartzDataSource" ignore-failures="ALL">
            <jdbc:script location="classpath:sql/mysql/quartz.sql"/>
        </jdbc:initialize-database>
    </beans>
</beans>